// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Or(a=loadA, b=instruction[3], out=loadAorM);
	And(a=loadA, b=instruction[15], out=feedback);
	Mux16(a=instruction, b=outALU, sel=feedback, out=outMux);

	And(a=instruction[4], b=instruction[15], out=loadD);
	DRegister(in=outALU, load=loadD, out=D);

	Not(in=instruction[15], out=at);
	Or(a=at, b=instruction[5], out=loadA);
	ARegister(in=outMux, load=loadA, out=A, out[0..14]=addressM);

	Mux16(a=A, b=inM, sel=instruction[12], out=AorM);
	ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out[15]=isnegative, out=outALU, out=outM);

	DMux8Way(in=true, sel=instruction[0..2], a=null,b=gt,c=eq,d=ge,e=lt,f=ne,g=le,h=jmp);
	Not(in=isnegative, out=isnotnegative);
	Bool(in=outALU, out=isnotzero);
	And(a=isnotnegative, b=isnotzero, out=ispositive);
	Not(in=isnotzero, out=iszero);
	Not(in=ispositive, out=isnotpositive);
	And(a=gt, b=ispositive, out=jgt);
	And(a=eq, b=iszero, out=jeq);
	And(a=ge, b=isnotnegative, out=jge);
	And(a=lt, b=isnegative, out=jlt);
	And(a=ne, b=isnotzero, out=jne);
	And(a=le, b=isnotpositive, out=jle);
	Or8Way(in[0]=false, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=jmp, out=possiblejump);

	And(a=possiblejump, b=instruction[15], out=jump);
	Not(in=jump, out=step);
	PC(in=A, load=jump, inc=step, reset=reset, out[0..14]=pc);
	Bool(in=outALU,out=possibleM);
	And(a=possibleM, b=instruction[15], out=hasM);
	And(a=instruction[3], b=hasM, out=writeM);
}
